{"version":3,"sources":["components/ErrorMessage/ErrorMessage.jsx","utils/tokenService.js","utils/userService.js","pages/SignupPage/SignupPage.jsx","pages/LoginPage/LoginPage.jsx","pages/Profile/Profile.jsx","components/Header/Header.jsx","components/AddPostForm/AddPostForm.jsx","components/PostCard/PostCard.jsx","components/DisplayPosts/DisplayPosts.jsx","utils/postApi.js","pages/Feed/Feed.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["ErrorMessage","props","className","error","getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","signup","fetch","method","body","then","res","ok","json","response","console","log","Error","err","tokenService","logout","login","creds","headers","Headers","stringify","getUser","SignUpPage","useState","message","passwordError","setError","username","email","password","passwordConf","state","setState","selectedFile","setSelectedFile","navigate","useNavigate","handleChange","e","target","name","value","isPasswordMatch","passwordOne","a","preventDefault","formData","FormData","append","forEach","item","userService","handleSignUpOrLogin","Grid","textAlign","style","height","width","verticalAlign","Column","maxWidth","as","Form","onSubmit","Segment","stacked","Input","placeholder","onChange","required","type","files","Button","LoginPage","to","ProfilePage","loggedUser","PageHeader","handleLogout","clearing","Header","floated","Image","src","photoUrl","AddPostForm","song","artist","genre","mood","handleSubmit","handleAddPost","Field","onClick","PostCard","posts","isProfile","key","Card","size","avatar","Content","Description","_id","DisplayPosts","create","post","Authorization","getAll","Feed","setPosts","loading","setLoading","postsAPI","data","useEffect","getPosts","App","setUser","path","element","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.06db519f.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function ErrorMessage(props){\n    return <span className={\"error\"}>{props.error}</span>\n}","function setToken(token) {\n    if (token) {\n      // localStorage is given to us by the browser\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n  \n  function getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      // Check if expired, remove if it is\n      // atob is a function that decodes a base-64 string\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      // JWT's exp is expressed in seconds, not milliseconds, so convert\n      if (payload.exp < Date.now() / 1000) {\n        localStorage.removeItem('token');\n        token = null;\n      }\n    }\n    return token;\n  }\n  \n  function getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n  }\n  \n  function removeToken() {\n    localStorage.removeItem('token');\n  }\n  \n  export default {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n  };","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\n\n// NOTE THIS IS configured to send of a multi/part form request\n// aka photo \nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    body: user // assuming you are sending a multipart-formdata request a.k.a. uploading a photo\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    // Probably a duplicate email\n    \n    // Writing your error handling like this allows you to throw the error response \n    // to the catch block where signup occurs,  \n\n//     res.status(400).json({ err: \"Something went wrong\" }); notice err, and response.err match\n    return res.json().then(response => {\n      console.log(response)\n      throw new Error(response.err)\n    })\n  })\n  // Parameter destructuring!\n  .then(({token}) => tokenService.setToken(token));\n  // Setting our token in localStorage in our browser\n  // then we'll be able to use with every request!\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    return res.json().then(response => {\n      console.log(response)\n      throw new Error(response.err)\n    })\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\n\nexport default {\n  signup, \n  logout,\n  login,\n  getUser\n};\n","import React, { useState } from \"react\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\n\nimport userService from \"../../utils/userService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button, Checkbox, Form, Grid, Segment } from 'semantic-ui-react'\n\nexport default function SignUpPage(props) {\n  const [error, setError] = useState({\n    message: \"\",\n    passwordError: false\n  })\n\n  // setting up the useState for user sign up form below\n  const [state, setState] = useState({\n    username: '',\n    email: '',\n    password: '',\n    passwordConf: '',\n  })\n\n  // setting up the useState for the photo upload below\n  const [selectedFile, setSelectedFile] = useState('')\n  const navigate = useNavigate();\n\n  function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    })\n  }\n  function handleImageInput(e) {\n    console.log(e.target.files, \"<-- this is the image upload\")\n    setSelectedFile(e.target.files[0])\n  }\n\n  function isPasswordMatch(passwordOne, passwordConf) {\n    return passwordOne === passwordConf;\n  }\n\n  // function to handle form submission using 'formdata' \n  // \n  async function handleSubmit(e) {\n    e.preventDefault()\n    if (!isPasswordMatch(state.password, state.passwordConf)) return setError({ message: 'Passwords Must Match!', passwordError: true })\n    setError({ message: '', passwordError: false })\n    const formData = new FormData()\n    formData.append('photo', selectedFile)\n    for (let value in state) {\n      formData.append(value, state[value]);\n    }\n\n    console.log(formData.forEach((item) => console.log(item)), \"<- this is each value in the formData\")\n\n    try {\n      await userService.signup(formData);\n      props.handleSignUpOrLogin();\n      navigate(\"/\");\n    } catch (err) {\n      setError({ message: err.message, passwordError: false })\n    }\n  }\n\n\n\n  return (\n    <Grid\n      textAlign=\"center\"\n      style={{ height: \"100vh\", width: \"100vw\" }}\n      verticalAlign=\"middle\"\n    >\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <h1 as=\"h2\">Please Sign Up</h1>\n        <Form onSubmit={handleSubmit}>\n          <Segment stacked>\n            <Form.Input\n              name=\"username\"\n              placeholder=\"username\"\n              value={state.username}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"email\"\n              value={state.email}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"password\"\n              value={state.password}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              type=\"password\"\n              name=\"passwordConf\"\n              placeholder=\"password Confirmation\"\n              value={state.passwordConf}\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              type=\"file\"\n              name=\"photo\"\n              placeholder=\"upload image\"\n              onChange={handleImageInput}\n              required\n            />\n            <Button type='submit' >\n              Sign up\n            </Button>\n          </Segment>\n          {error.message ? <ErrorMessage error={error.message} /> : null}\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./LoginPage.css\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport userService from \"../../utils/userService\";\nimport { Button, Checkbox, Form, Grid, Segment } from 'semantic-ui-react'\nimport { useNavigate, Link } from \"react-router-dom\"\n\nexport default function LoginPage(props) {\n  const [error, setError] = useState('')\n\n  const [state, setState] = useState({\n    username: \"\",\n    password: \"\"\n  })\n\n  const navigate = useNavigate();\n\n  function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  async function handleSubmit(e){\n    e.preventDefault();\n    try {\n      await userService.login(state);\n      props.handleSignUpOrLogin();\n      navigate(\"/\");\n    } catch(err){\n      setError(err.message)\n    }\n  }\n  return (\n    // <h1>Setup Login Page</h1>\n    <Grid\n      textAlign=\"center\"\n      style={{ height: \"100vh\", width: \"100vw\" }}\n      verticalAlign=\"middle\"\n    >\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <h1 as=\"h2\">Please log in below</h1>\n        <Form onSubmit={handleSubmit}>\n          <Segment>\n            <Form.Input\n            type=\"username\"\n            name=\"username\"\n            placeholder=\"username\"\n            value={state.username}\n            onChange={handleChange}\n            required\n            />\n            <Form.Input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            value={state.password}\n            onChange={handleChange}\n            required\n            />\n            <Button type=\"submit\">\n              Log in\n            </Button>\n          </Segment>\n          {error.message ? <ErrorMessage error={error.message} /> : null}\n        </Form>\n        <Segment>\n          <h3>If you do you have an account, please <Link to=\"/Signup\">Sign up.</Link></h3>\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport PageHeader from \"../../components/Header/Header\"\n\nexport default function ProfilePage({loggedUser}){\n    return(\n        <>\n        <PageHeader loggedUser={loggedUser}/>\n        <h1>This is the profile page</h1>\n        </>\n    )\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Header, Image, Segment } from \"semantic-ui-react\";\n\nimport ProfilePage from \"../../pages/Profile/Profile\"\n\nexport default function PageHeader({loggedUser, handleLogout}){\n    return(\n    <Segment clearing>\n    <Header as='h2' floated=\"left\">\n        <Image  src={\n                loggedUser?.photoUrl\n                ? loggedUser?.photoUrl\n                : \"https://react.semantic-ui.com/images/wireframe/square-image.png\"\n            } /> Patrick\n    </Header>\n    <Header textAlign=\"center\">\n        <h3>\n            <Link to={`/${loggedUser?.username}`}>Profile</Link>   Suggested/ Listen to Later Click to Add a New Song <Link to=\"/\">Feed</Link>\n       </h3>\n    </Header>\n    <Header floated=\"right\">\n        <Link to=\"/Login\" >\n            Logout\n        </Link>\n    </Header>\n    </Segment>\n    )\n}","import React, { useState } from \"react\";\nimport { Button, Form, Segment } from \"semantic-ui-react\";\n\nexport default function AddPostForm(props) {\n\n    const [state, setState] = useState({\n        song: \"\",\n        artist: \"\",\n        genre: \"\",\n        mood: \"\"\n    })\n\n    const [selectedFile, setSelectedFile] = useState(\"\");\n\n    function handleChange(e){\n        setState({\n            ...state,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    function handleImageInput(e){\n        setSelectedFile(e.target.files[0])\n    }\n\n    function handleSubmit(e){\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append('photo', selectedFile)\n        for (let value in state){\n            formData.append(value, state[value])\n        }\n        console.log(formData.forEach((item) => console.log(item)), \"<- this is each value\" )\n        props.handleAddPost(formData);\n    \n    }\n    return (\n        <>\n            <Segment>\n                <Form onSubmit={handleSubmit}>\n                    <Form.Input\n                        name=\"song\"\n                        value={state.song}\n                        placeholder=\"Song\"\n                        onChange={handleChange}\n                    />\n                    <Form.Input\n                        name=\"artist\"\n                        value={state.artist}\n                        placeholder=\"Artist\"\n                        onChange={handleChange}\n                    />\n                    <Form.Input\n                        name=\"genre\"\n                        value={state.genre}\n                        placeholder=\"Genre\"\n                        onChange={handleChange}\n                    />\n                    <Form.Input\n                        name=\"mood\"\n                        value={state.mood}\n                        placeholder=\"mood\"\n                        onChange={handleChange}\n                    />\n                    <Form.Field>\n                        <Form.Input\n                            type=\"file\"\n                            name=\"photo\"\n                            placeholder=\"upload image\"\n                            onChange={handleImageInput}\n                        />\n                    </Form.Field>\n                    <Button type=\"submit\" onClick={handleSubmit}>\n                        Submit Post!\n                    </Button>\n                </Form>\n            </Segment>\n        </>\n    )\n}","import React from \"react\";\nimport {Segment, Card, Image} from \"semantic-ui-react\"\n\nexport default function PostCard({posts, loggedUser, key, isProfile}){\n    return(\n    <>\n    <Segment>\n    <Card key={posts._id}>\n        {isProfile ? (\n            \"\"\n        ) : (\n        \n        <Card.Header>\n            <h2>{posts.user.username}</h2>\n            <Image\n                size=\"large\"\n                avatar\n                src={\n                  posts.user.photoUrl\n                    ? posts.user.photoUrl\n                    : \"https://react.semantic-ui.com/images/wireframe/square-image.png\"\n                }\n              />\n        </Card.Header>\n        )}\n        <Image src={`${posts?.photoUrl}`} />\n        <Card.Content>\n            <Card.Description>{posts.song}</Card.Description>\n            <Card.Description>{posts.artist}</Card.Description>\n            <Card.Description>{posts.genre}</Card.Description>\n            <Card.Description>{posts.mood}</Card.Description>\n        </Card.Content>\n\n\n        </Card>\n    </Segment>\n    </>\n    )\n}","import React from \"react\";\nimport PostCard from \"../../components/PostCard/PostCard\"\n\nexport default function DisplayPosts({posts, isProfile, loggedUser}){\nreturn(\n    <>\n    <PostCard\n    posts={posts}\n    key={posts._id}\n    loggedUser={loggedUser}\n    isProfile={isProfile}\n    />\n    </>\n)\n}","import tokenService from \"./tokenService\";\n\nconst BASE_URL = \"/api/posts\"\n\nexport function create(post){\n    return fetch(BASE_URL, {\n        method: \"POST\",\n        body: post,\n        headers: {\n            Authorization: \"Bearer\" + tokenService.getToken(),\n        },\n    }).then((res) => {\n        if (res.ok) return res.json();\n        return res.json().then(response => {\n            console.log(response)\n            throw new Error(response.err)\n        })\n    });\n}\n\nexport function getAll(){\n    return fetch(BASE_URL, {\n        headers: {\n            Authorization: \"Bearer \" + tokenService.getToken(),\n        }\n    }).then((res) => {\n        if(res.ok) return res.json();\n        return res.json().then(response =>{\n            throw new Error(response.err)\n        })\n    });\n}","import React, {useState, useEffect} from \"react\";\n\nimport PageHeader from \"../../components/Header/Header\"\nimport AddPostForm from \"../../components/AddPostForm/AddPostForm\"\nimport DisplayPosts from \"../../components/DisplayPosts/DisplayPosts\"\nimport * as postsAPI from \"../../utils/postApi\"\n\nexport default function Feed({loggedUser, handleLogout}){\n    const [post, setPosts] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(\"\");\n\n    async function handleAddPost(post){\n        try{\n            setLoading(true);\n            const response = await postsAPI.create(post)\n            console.log(response)\n            setPosts([response.data, ...post]);\n            setLoading(false);\n        } catch(err){\n            setError('Error creating post, please try again')\n        }\n    }\n\n    async function getPosts(){\n        try{\n            const response = await postsAPI.getAll();\n            setPosts([...response.data]);\n            setLoading(false);\n        } catch(err){\n            setLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        getPosts();\n    }, []);\n\n    if (error) {\n        return (\n          <>\n            <PageHeader handleLogout={handleLogout} loggedUser={loggedUser} />\n            {/* <ErrorMessage error={error} />; */}\n          </>\n        );\n      }\n    \n      if (loading) {\n        return (\n          <>\n            <PageHeader handleLogout={handleLogout} loggedUser={loggedUser} />\n            {/* <Loading /> */}\n          </>\n        );\n      }\n\n    return (<>\n\n        <PageHeader loggedUser={loggedUser}/>\n        <AddPostForm handleAddPost={handleAddPost}/>\n        <DisplayPosts posts={post} loggedUser={loggedUser} isProfile={false}/>\n        <h1>This is the Feed Page</h1>\n        </>\n    )\n}","import React, { useState } from \"react\";\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport SignupPage from \"../SignupPage/SignupPage\";\nimport LoginPage from \"../LoginPage/LoginPage\";\nimport Feed from \"../Feed/Feed\";\nimport Profile from \"../Profile/Profile\"\n\nimport userService from \"../../utils/userService\";\n\nfunction App() {\n  const [user, setUser] = useState(userService.getUser()); // getUser decodes our JWT token, into a javascript object\n  // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like\n  // this  const token = createJWT(user); // where user was the document we created from mongo\n\n  function handleSignUpOrLogin() {\n    setUser(userService.getUser()); // getting the user from localstorage decoding the jwt\n  }\n\n  function handleLogout() {\n    userService.logout();\n    setUser(null);\n  }\n\n  if (user) {\n    // if the user is logged in (AKA the json web token JWT exists)\n    return (\n      <Routes>\n        <Route path=\"/\" element={<Feed loggedUser={user}/>} />\n        <Route\n          path=\"/login\"\n          element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n        />\n        <Route\n          path=\"/signup\"\n          element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n        />\n        <Route\n        path='/:username'\n        element={<Profile loggedUser={user} handleLogout={handleLogout}/>}\n        >\n        </Route>\n      </Routes>\n    );\n  }\n\n  return (\n    <Routes>\n      <Route\n        path=\"/login\"\n        element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n      />\n      <Route\n        path=\"/signup\"\n        element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n      />\n      <Route path=\"/*\" element={<Navigate to=\"/login\" />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router><App/></Router>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}